- name: Watch for VirtualMachine changes for Disaster Recovery
  hosts: all
  sources:
    - kseremet.eda.k8s:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        namespace: "{{ watch_namespace | default('') }}"
              
  rules:
    # Handle legitimate creates and updates using a passive throttle.
    - name: Trigger DR sync for new or updated VMs
      condition: > 
        event.k8s_event.type in ["ADDED", "MODIFIED"] and 
        event.k8s_event.object.spec.template is defined
      
      throttle:
        once_after: "30 seconds"
        group_by_attributes:
          - event.k8s_event.object.metadata.name
          - event.k8s_event.object.metadata.namespace
      
      actions:
        # - run_workflow_template:
        #     name: replicate-vm-to-dr-site
        #     organization: Default
        #     job_kwargs:
        #       extra_vars:
        #         vm_object: "{{ event.k8s_event.object }}"
        # - run_playbook:
        #        name: gitops-vm-dr-infra/ansible/playbooks/export_and_clean_resources.yaml
        #        extra_vars:
        #            event_vm_object: "{{ event.k8s_event.object }}"
        - debug:
            msg: |-
              {% if events is mapping %}
              Processing VM batch:
              {% for item in events.values() %}
              - {{ item.k8s_event.object.metadata.namespace }}/{{ item.k8s_event.object.metadata.name }}
              {% endfor %}
              {% else %}
              Processing single VM:
              - {{ event.k8s_event.object.metadata.namespace }}/{{ event.k8s_event.object.metadata.name }}
              {% endif %}
        - run_job_template:
            name: GitOps Based VM DR Automation - Process VM Update Event
            organization: Default
            job_args:
              extra_vars:
                #event_vm_object: "{{ event.k8s_event.object }}"
                vm_objects_list: >-
                  {% if events is mapping %}
                  {{ (events.values() | map(attribute='k8s_event.object') | list) | to_json }}
                  {% else %}
                  {{ ([ event.k8s_event.object ]) | to_json }}
                  {% endif %}

    # Handle the deletion event.
    - name: Trigger DR cleanup for deleted VMs
      condition: event.k8s_event.type == "DELETED"

      throttle:
        once_after: "30 seconds"
        group_by_attributes:
          - event.k8s_event.object.metadata.namespace

      actions:
        # - run_workflow_template:
        #     name: cleanup-vm-from-dr-site
        #     organization: Default
        #     job_kwargs:
        #       extra_vars:
        #         vm_object: "{{ event.k8s_event.object }}"
        # - run_playbook:
        #        name: gitops-vm-dr-infra/ansible/playbooks/garbage_collector.yaml
        - debug:
            msg: |-
              {% if events is mapping %}
              Following VMs were deleted:
              {% for item in events.values() %}
              - {{ item.k8s_event.object.metadata.namespace }}/{{ item.k8s_event.object.metadata.name }}
              {% endfor %}
              {% else %}
              A VM named {{ event.k8s_event.object.metadata.namespace }}/{{ event.k8s_event.object.metadata.name }} was deleted.
              {% endif %}
        - run_job_template:
            name: GitOps Based VM DR Automation - Garbage Collector
            organization: Default
