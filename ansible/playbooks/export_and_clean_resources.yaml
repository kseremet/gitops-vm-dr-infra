- name: Export and Clean Kubernetes Resources for a VM
  hosts: localhost
  gather_facts: false
  connection: local

  vars:
    # --- Git Configuration ---
    git_ssh_key_path: "{{ lookup('env', 'ANSIBLE_PRIVATE_KEY_FILE') }}"
    github_user: "kseremet"
    repo_name: "gitops-vm-dr-manifests"
    repo_url: "git@github.com:{{ github_user }}/{{ repo_name }}.git" # SSH URL
    clone_dir: "/tmp/{{ repo_name }}"

    # --- Kustomize Configuration ---
    target_cluster_name: cls2

  tasks:
    - name: Exit immediately if VM is being deleted
      ansible.builtin.meta: end_play
      when: event_vm_object.metadata.deletionTimestamp is defined

    - name: Check if VM is enabled for Disaster Recovery
      ansible.builtin.meta: end_play
      when: event_vm_object.metadata.labels['dr.demojam.com/enabled'] | default('false') != 'true'

    - name: Get VM name and namespace from the incoming event
      ansible.builtin.set_fact:
        vm_name: "{{ event_vm_object.metadata.name }}"
        vm_namespace: "{{ event_vm_object.metadata.namespace }}"

    - name: Get the LATEST version of the VM object from the cluster
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ vm_namespace }}"
      register: live_vm_info_result

    - name: Set the 'vm_object' fact to the live object for the core logic to use
      ansible.builtin.set_fact:
        vm_object: "{{ live_vm_info_result.resources[0] }}"

    - name: Perform a shallow clone of the Git repository via SSH
      ansible.builtin.git:
        repo: "{{ repo_url }}"
        dest: "{{ clone_dir }}"
        depth: 1
        clone: true
        update: true
        key_file: "{{ git_ssh_key_path }}"
        accept_hostkey: true

    - name: Process the single VM from the event (always sync)
      ansible.builtin.include_tasks:
        file: tasks/process_single_vm.yml
      vars:
        force_sync: true
        # The vm_object is passed in as an extra_var from EDA

    - name: Check for any changes in the repository
      ansible.builtin.command: git status --porcelain
      args:
        chdir: "{{ clone_dir }}"
      register: git_status
      changed_when: git_status.stdout | length > 0

    - name: Commit and push all changes if any were made
      when: git_status.changed
      block:
        - name: Add all changes to git staging
          ansible.builtin.command: git add vms
          args:
            chdir: "{{ clone_dir }}"

        - name: Commit changes
          ansible.builtin.command: git commit -m "Automated DR Reconciliation Sync"
          args:
            chdir: "{{ clone_dir }}"

        - name: Push changes to the remote repository
          ansible.builtin.shell: git push origin HEAD
          args:
            chdir: "{{ clone_dir }}"
          environment:
            GIT_SSH_COMMAND: "ssh -i {{ git_ssh_key_path }} -o StrictHostKeyChecking=no"

